version: "3.8"

services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: bausenberg-check-in-client
    container_name: bausenberg-check-in-client
    restart: always
    depends_on:
      - server
    labels:
      traefik.enable: true
      traefik.http.routers.bausenberg-check-in.rule: "Host(${DOMAIN})"
      traefik.http.routers.bausenberg-check-in.entrypoints: websecure
      traefik.http.routers.bausenberg-check-in.tls.certresolver: myresolver
      traefik.http.routers.bausenberg-check-in.priority: 100

      traefik.docker.network: traefik

  server:
    image: node:16.2.0-alpine3.13
    restart: always
    container_name: bausenberg-check-in-server
    depends_on:
      - db

    working_dir: /bausenberg-check-in/server
    volumes:
      - ./:/bausenberg-check-in:rw
    environment:
      - NODE_ENV=production
      - DB_CONNECTION=${DB_CONNECTION}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
    labels:
      traefik.enable: true
      traefik.http.routers.bausenberg-check-in-ws.rule: "Host(${DOMAIN}) && PathPrefix(`/api`)"
      traefik.http.routers.bausenberg-check-in-ws.entrypoints: websecure
      traefik.http.routers.bausenberg-check-in-ws.tls.certresolver: myresolver
      traefik.http.routers.bausenberg-check-in-ws.priority: 200
      traefik.http.services.bausenberg-check-in-ws.loadbalancer.server.port: 3031

      traefik.docker.network: traefik
    command: ./docker-entrypoint.sh

  db:
    image: mongo:4
    restart: always
    container_name: bausenberg-check-in-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}

    volumes:
      - db:/data/db

volumes:
  db:

networks:
  default:
    external:
      name: traefik
