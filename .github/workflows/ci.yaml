# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Next.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  ADMIN_USERNAME: admin
  ADMIN_PASSWORD: password
  NEXTAUTH_URL: http://localhost:3000/
  NEXTAUTH_SECRET: fb3qi8rzabdszi8q27neqow8han87rhcnw
  CHECKIN_RATE_LIMIT: 2
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

jobs:
  build:
    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [20.x]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Generate prisma scheme
        run: yarn prisma generate

      - name: Push prisma schema to db
        run: yarn prisma db push

      - name: Seed DB test data
        run: yarn prisma db seed

      - name: Build next.js server
        run: yarn build

      - name: Start next.js server and run tests
        run: yarn start & yarn test-ci
