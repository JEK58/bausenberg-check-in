import Head from "next/head";
import CheckIn from "@/models/Check-In";
import { InferGetServerSidePropsType } from "next";
import { GetServerSideProps } from "next";
import { formatInTimeZone, format } from "date-fns-tz";

export default function Admin({
  data,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const listEntries = data.map((entry) => (
    <tr key={entry._id}>
      <td>{entry.name}</td>
      <td>{entry.club}</td>
      <td>{entry.landing}</td>
      <td>{formatDate(entry.checkInDate)}</td>
      <td>
        <a href="#" className="warning">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="14"
            height="14"
            fill="currentColor"
            className="bi bi-trash"
            viewBox="0 0 16 16"
          >
            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
            <path
              fillRule="evenodd"
              d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"
            />
          </svg>
        </a>
      </td>
    </tr>
  ));

  return (
    <>
      <Head>
        <title>Bausenberg Admin Panel</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container">
        <div v-if="loggedIn">
          <h4>Bausenberg Admin Panel</h4>
          <nav>
            <ul>
              <li>
                <h4>Statistik</h4>
              </li>
            </ul>
            <ul>
              <li>
                <a href="#" role="button">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    fill="currentColor"
                    className="bi bi-arrow-repeat"
                    viewBox="0 0 20 20"
                  >
                    <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z" />
                    <path
                      fillRule="evenodd"
                      d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"
                    />
                  </svg>
                </a>
              </li>
              <li>
                select
                {/* <select id="years" v-model="filterByYear">
                  <option
                    v-for="year in availableYears"
                    key="year"
                    value="year"
                  >
                    {{ year }}
                  </option>
                </select> */}
              </li>
            </ul>
          </nav>
          {/* <article>
        <h6>
          Gesamt: <strong>{{ dataToShow?.length }}</strong>
        </h6>

        <ul>
          <li>
            Landewiese: <strong>{{ statistics?.regularLanding ?? 0 }}</strong>
          </li>
          <li>
            Notlandewiese:
            <strong>{{ statistics?.alternateLanding ?? 0 }}</strong>
          </li>
          <li>
            Streckenflug:<strong> {{ statistics?.xcLanding ?? 0 }}</strong>
          </li>
          <li>
            Nicht gestartet:
            <strong>{{ statistics?.didNotStart ?? 0 }}</strong>
          </li>
          <li>
            Landung nicht gemeldet:
            <strong>{{ statistics?.notReported ?? 0 }}</strong>
          </li>
        </ul>
      </article> */}
          <h4>Liste</h4>
          <article>
            <table>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Verein</th>
                  <th>Landung</th>
                  <th>Datum</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>{listEntries}</tbody>
            </table>
          </article>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<{
  data: CheckIn[];
}> = async () => {
  const res = await CheckIn.find({}).sort({ checkInDate: -1 }).lean();
  const data = JSON.parse(JSON.stringify(res));

  return { props: { data } };
};

const formatDate = (timestamp: number | undefined) => {
  if (!timestamp) return "-";
  return formatInTimeZone(
    new Date(timestamp),
    "Europe/Berlin",
    "dd.MM.yy - HH:mm"
  );
};
