import Head from "next/head";
import { FormEvent, useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import {
  getIdFromLocalStorage,
  removeIdFromLocalStorage,
} from "@/util/local-storage";
import { Landing } from "@prisma/client";
import { badConnectionWarning } from "@/lib/user-messages";

export default function CheckOut() {
  const router = useRouter();
  const [error, setError] = useState<String | undefined>();
  const [landing, setLanding] = useState<Landing>();

  let checkInId = useRef<string | undefined>();

  useEffect(() => {
    checkInId.current = getIdFromLocalStorage();
    if (!checkInId.current) router.push("/");
  }, [router]);

  const handleSelect = (landing: Landing) => {
    setLanding(landing);
  };

  const handleSubmit = async (event: FormEvent) => {
    try {
      event.preventDefault();
      const data = {
        id: checkInId.current,
        landing: landing,
      };

      const endpoint = "/api/check-out";
      const options = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      };

      await fetch(endpoint, options);
      // Remove check-in from local storage in any case because the user
      // does not care if there is something wrong with the server
      removeIdFromLocalStorage();
      setError(undefined);
      router.push("/thank-you");
    } catch (error) {
      setError(badConnectionWarning);
      console.log("catch", error);
    }
  };
  return (
    <>
      <Head>
        <title>Bausenberg Check-in</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <main className="container">
        <h3>Bausenberg Check-out</h3>
        <form onSubmit={handleSubmit}>
          <fieldset>
            <label htmlFor="btn-regular-landing">
              <input
                id="btn-regular-landing"
                type="radio"
                name="landing"
                onClick={() => handleSelect(Landing.REGULAR)}
              />
              Landewiese üëå
            </label>

            <label htmlFor="btn-alternate-landing">
              <input
                id="btn-alternate-landing"
                type="radio"
                name="landing"
                onClick={() => handleSelect(Landing.ALT)}
              />
              Notlandewiese üßê
            </label>

            <label htmlFor="btn-xc-landing">
              <input
                id="btn-xc-landing"
                type="radio"
                name="landing"
                onClick={() => handleSelect(Landing.XC)}
              />
              Streckenflug üéâ
            </label>

            <label htmlFor="btn-no-takeoff">
              <input
                id="btn-no-takeoff"
                type="radio"
                name="landing"
                onClick={() => handleSelect(Landing.DNF)}
              />
              Doch nicht gestartet ü§∑
            </label>
          </fieldset>

          <button disabled={!landing}>Check out</button>
        </form>
        <div className="warning">{error}</div>
      </main>
    </>
  );
}
